Analysis_model_of_DetectRepeats.txt

Shu-Ting Cho <shutingcho@pitt.edu>

# Properties of structural tandem repeats

# Task: Generate plots for Fig1BCDEF
# 0. download PDB files using cull
# 1. Run CE-Symm on PDB files
# 2. Generate plots

# Graphical Abstract


# Download PDBs as described in the manuscript


# Run CE-Symm (using 5CWN as an example, same process applied to all downloaded .pdb)
cd cesymm-2.3.0-SNAPSHOT
./runCESymm.sh 5cwn.pdb


library(DECIPHER)

############################### Fig1B ###############################
# show distribution for how often finding the closest unit to be the most similar unit
# convert probabilities into log-odds
answer <- read.table('benchmark_structural/convert_seq_id.3.tsv', header = TRUE, sep= "\t")
PDBs <- unique(answer$ID1)
v_n_unit_away <- c()
background <- integer(100)
names(background) <- seq(100)
copy_numbers <- c()
for (i in seq_along(PDBs)) {
    pdb_h <- PDBs[i]
    cat(i, pdb_h, '\n', sep='\t')
	msa <- readAAStringSet(paste0('benchmark_structural/Update_CE-Symmv2.3.0_benchmark/repeat_alignments_v2/',pdb_h, '.fas'))
    dist <- DistanceMatrix(msa, includeTerminalGaps = TRUE, penalizeGapLetterMatches = NA, verbose=FALSE)
	copy_number_h <- length(msa)
	copy_numbers <- c(copy_numbers, copy_number_h)
	count_j <- 0
	for (j in seq(copy_number_h - 1)) {
		add_j=(copy_number_h - j)*2/(copy_number_h - 1)
		background[j] = background[j] + add_j
		count_j=count_j+add_j
	}
	for (i_unit in seq(copy_number_h)) {
		dist_h <- dist[i_unit,]
		dist_h[i_unit] <- NA # mask unit_h
		min_dist_h <- sort(unique(dist_h[-i_unit]))[1]
		i_most_sim <- which(abs(dist_h - min_dist_h) < 0.00001)
		n_unit_away <- min(abs(i_most_sim - i_unit))
		v_n_unit_away <- c(v_n_unit_away, n_unit_away)
	}
}

sum(table(v_n_unit_away))
[1] 5293
sum(background[1:23])
[1] 5293

table(copy_numbers)
  2   3   4   5   6   7   8   9  10  11  12  13  14  16  17  18  20  21  22  24 
647 122 113  87 117  86  55  18  14  14  11   5   6   3   3   2   1   2   2   1 
barplot(height=table(copy_numbers), main='copy_numbers')

round(background[1:23])
   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 
2618  976  628  403  252  145   85   54   38   27   19   13   10    7    6    4 
  17   18   19   20   21   22   23 
   3    2    2    1    0    0    0 
barplot(height=background[1:23], main='background')

t_unit_away <- table(v_n_unit_away)
   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18 
2877 1149  511  358  143   99   53   35   21   17   10    7    3    4    2    1    2    1 
barplot(height=t_unit_away, main='most_similar_unit')

# bar plot
subset <- 1:9 # NOTE: repeats start at 2 copies
unit_x <- c(t_unit_away[subset], sum(t_unit_away[-subset]))
unit_y <- c(background[subset], sum(background[-subset]))
bar_value <- log(unit_x/unit_y)
pdf(file = "~/Documents/project/TR02/TR02.103/most_sim_unit_logodds_07242025.pdf", width = 4, height = 4.5)
barplot(height = bar_value, names.arg=c(names(bar_value)[-10],'â‰¥10'), ylim = c(-0.8,0.2), main='Separation from\nmost similar unit', xlab='Number of units apart', ylab='Empirical log-odds')
#box()
dev.off()



#######################################################
library(DECIPHER)

path <- "benchmark_structural/Update_CE-Symmv2.3.0_benchmark/repeat_alignments_v2/"

ls <- list.files(path)

sM <- matrix(c(0.951, -0.266, -0.305, -0.327, 0.099, -0.126, -0.151, 0.041, -0.383, -0.26, -0.274, -0.236, -0.131, -0.451, -0.14, 0.191, 0.008, -0.586, -0.501, 0.015, -2.542, -0.266, 1.465, 0.013, -0.153, -0.741, 0.37, 0.117, -0.453, 0.178, -0.81, -0.701, 0.679, -0.46, -0.874, -0.311, -0.097, -0.129, -0.5, -0.415, -0.679, -2.542, -0.305, 0.013, 1.494, 0.532, -0.582, 0.189, 0.129, 0.037, 0.255, -0.962, -0.947, 0.202, -0.606, -0.879, -0.252, 0.261, 0.075, -0.873, -0.433, -0.834, -2.542, -0.327, -0.153, 0.532, 1.575, -1.007, 0.155, 0.597, -0.131, -0.045, -1.265, -1.194, 0.052, -0.915, -1.235, -0.131, 0.099, -0.121, -1.102, -0.8, -1.051, -2.542, 0.099, -0.741, -0.582, -1.007, 3.127, -0.777, -0.995, -0.499, -0.438, -0.174, -0.218, -0.884, -0.137, -0.189, -0.832, -0.091, -0.185, -0.446, -0.268, 0.016, -2.542, -0.126, 0.37, 0.189, 0.155, -0.777, 1.289, 0.494, -0.368, 0.251, -0.762, -0.636, 0.433, -0.259, -0.846, -0.241, 0.046, -0.01, -0.707, -0.444, -0.624, -2.542, -0.151, 0.117, 0.129, 0.597, -0.995, 0.494, 1.287, -0.38, -0.057, -0.967, -0.931, 0.342, -0.646, -1.116, -0.162, 0.007, -0.072, -0.97, -0.681, -0.758, -2.542, 0.041, -0.453, 0.037, -0.131, -0.499, -0.368, -0.38, 1.768, -0.42, -1.087, -1.022, -0.369, -0.758, -0.924, -0.333, 0.043, -0.342, -0.886, -0.863, -0.861, -2.542, -0.383, 0.178, 0.255, -0.045, -0.438, 0.251, -0.057, -0.42, 2.254, -0.781, -0.663, 0.033, -0.433, -0.29, -0.354, -0.099, -0.206, -0.217, 0.381, -0.664, -2.542, -0.26, -0.81, -0.962, -1.265, -0.174, -0.762, -0.967, -1.087, -0.781, 1.184, 0.585, -0.819, 0.423, 0.216, -0.799, -0.716, -0.29, -0.347, -0.258, 0.785, -2.542, -0.274, -0.701, -0.947, -1.194, -0.218, -0.636, -0.931, -1.022, -0.663, 0.585, 1.087, -0.799, 0.585, 0.39, -0.777, -0.73, -0.43, -0.123, -0.159, 0.343, -2.542, -0.236, 0.679, 0.202, 0.052, -0.884, 0.433, 0.342, -0.369, 0.033, -0.819, -0.799, 1.282, -0.5, -1.005, -0.175, 0.006, -0.035, -0.829, -0.564, -0.704, -2.542, -0.131, -0.46, -0.606, -0.915, -0.137, -0.259, -0.646, -0.758, -0.433, 0.423, 0.585, -0.5, 1.637, 0.285, -0.712, -0.406, -0.171, -0.135, -0.091, 0.219, -2.542, -0.451, -0.874, -0.879, -1.235, -0.189, -0.846, -1.116, -0.924, -0.29, 0.216, 0.39, -1.005, 0.285, 1.717, -0.837, -0.7, -0.528, 0.608, 0.885, 0.045, -2.542, -0.14, -0.311, -0.252, -0.131, -0.832, -0.241, -0.162, -0.333, -0.354, -0.799, -0.777, -0.175, -0.712, -0.837, 2.121, -0.015, -0.198, -0.777, -0.763, -0.588, -2.542, 0.191, -0.097, 0.261, 0.099, -0.091, 0.046, 0.007, 0.043, -0.099, -0.716, -0.73, 0.006, -0.406, -0.7, -0.015, 0.979, 0.427, -0.727, -0.505, -0.505, -2.542, 0.008, -0.129, 0.075, -0.121, -0.185, -0.01, -0.072, -0.342, -0.206, -0.29, -0.43, -0.035, -0.171, -0.528, -0.198, 0.427, 1.128, -0.659, -0.439, -0.062, -2.542, -0.586, -0.5, -0.873, -1.102, -0.446, -0.707, -0.97, -0.886, -0.217, -0.347, -0.123, -0.829, -0.135, 0.608, -0.777, -0.727, -0.659, 3.153, 0.763, -0.428, -2.542, -0.501, -0.415, -0.433, -0.8, -0.268, -0.444, -0.681, -0.863, 0.381, -0.258, -0.159, -0.564, -0.091, 0.885, -0.763, -0.505, -0.439, 0.763, 2.023, -0.287, -2.542, 0.015, -0.679, -0.834, -1.051, 0.016, -0.624, -0.758, -0.861, -0.664, 0.785, 0.343, -0.704, 0.219, 0.045, -0.588, -0.505, -0.062, -0.428, -0.287, 1.084, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, 3.235),
	nrow=21,
	ncol=21,
	dimnames=list(c(AA_STANDARD, "*"), c(AA_STANDARD, "*")))

scores <- scores2 <- d <- d2 <- widths <- numeric(length(ls))
l <- integer(length(ls))
AAs <- matrix(0, length(ls), 20)
colnames(AAs) <- AA_STANDARD
pBar <- txtProgressBar(style=3)
for (i in seq_along(scores)) {
	setTxtProgressBar(pBar, i/length(scores))
	aa <- readAAStringSet(paste0(path, ls[i]))
	l[i] <- length(aa)
	aa <- AAStringSet(toupper(aa))
	AAs[i,] <- alphabetFrequency(unlist(aa))[1:20]
	d[i] <- mean(DistanceMatrix(aa, verbose=FALSE, type="dist"))
	scores[i] <- ScoreAlignment(aa,
		method="adjacent",
		gapOpening=-0.1,
		gapExtension=-2.6,
		substitutionMatrix=sM,
		includeTerminalGaps=TRUE)
	# realign
	aa <- RemoveGaps(aa)
	widths[i] <- mean(width(aa))
	AA <- AlignSeqs(aa, verbose=FALSE)
	d2[i] <- mean(DistanceMatrix(AA, verbose=FALSE, type="dist"))
	scores2[i] <- ScoreAlignment(AA,
		method="adjacent",
		gapOpening=-0.1,
		gapExtension=-2.6,
		substitutionMatrix=sM,
		includeTerminalGaps=TRUE)
}
close(pBar)

# subset to those sets not used in benchmarking
r <- readLines("benchmark_structural/Update_CE-Symmv2.3.0_benchmark/CESYMM_seqID_UsedInBenchmarking_v2.txt")
W <- !(substring(ls, 1, nchar(ls) - 4L) %in% r) # set not used in benchmarking

# subset to those sets with non-zero TM-scores
load('model/ResultPDBs_v2.RData')
res <- unlist(res)
res <- strsplit(res, "\t")
w <- which(lengths(res) == 16) # missing repeats
res[w] <- lapply(res[w], c, NA_character_)
res <- do.call(cbind, res)
res <- t(res)
res <- as.data.frame(res)
res <- res[as.numeric(res$V11)!=0,] # 4436
res <- res[res[, "V11"] >= 0.4 & res[, "V11"] < 0.6,] # 2629
W[!(substring(ls, 1, nchar(ls) - 4L) %in% rownames(res))] <- FALSE
#writeLines(substring(ls, 1, nchar(ls) - 4L)[W], "benchmark_structural/Update_CE-Symmv2.3.0_benchmark/PDB_TrainingSet_v4.txt")


### Single Amino Acids: Fig1E. Amino acid composition
dev.new()
z <- readAAStringSet("model/cullpdb_pc50.0_res0.0-2.0_noBrks_len40-10000_R0.25_Xray_d2025_02_20_chains16323.fasta")
m <- match(substring(ls, 1, nchar(ls) - 4L), gsub("^(.+?) .+$", "\\1", names(z)))
a1 <- alphabetFrequency(z[m])[, 1:20]
a1 <- colSums(a1[W,]) # background
a2 <- colSums(AAs[W,]) # foreground
a1 <- a1 - a2 # approximately subtract repeat region
a1 <- a1/sum(a1)
a2 <- a2/sum(a2)
S <- log(a2/a1)
# plot(S, pch=NA, xlab="Amino acid", ylab="Log-odds in repeat")
# text(S, colnames(AAs))
# mean(colSums(S*t(AAs)))
# cat(paste(colnames(AAs), round(S, 2), sep="="), sep=", ")
# dev.new()
# matplot(t(AAs/rowSums(AAs)), type="l", col="#00000001", lty=1, xlab="Amino acid", ylab="Relative frequency", main="Compositional bias")

# from DetectRepeats.R: line 140
residues <- c(A=0.079, R=-0.038, N=0.091, D=0.067, C=0.352, Q=-0.084, E=-0.097, G=0, H=-0.921, I=0.322, L=0.113, K=-0.121, M=-0.376, F=0.248, P=-0.188, S=-0.206, T=0.029, W=0.321, Y=0.246, V=0.255)
# bar plot
pdf(file = "model/AAcomposition.pdf", width = 4, height = 4.5)
S2 <- residues[order(residues)]
barplot(S2, xlab="Amino acid", ylab="Log-odds in repeat")
bp <- barplot(S2, xlab="Amino acid", ylab="Log-odds in repeat", ylim=c(-0.9,0.4))
text(bp, S2, labels = names(S2))
dev.off() 
mean(colSums(S2*t(AAs))) # [1] 0.09935077
cat(paste(names(S2), round(S2, 2), sep="="), sep=", ") # C=0.35, I=0.32, W=0.32, V=0.26, F=0.25, Y=0.25, L=0.11, N=0.09, A=0.08, D=0.07, T=0.03, G=0, R=-0.04, Q=-0.08, E=-0.1, K=-0.12, P=-0.19, S=-0.21, M=-0.38, H=-0.92


### Periodicities: Fig1D. Repeat unit lengths
dev.new()
t <- tabulate(widths)/length(widths)
plot(t, xlab="Periodicity", ylab="Relative frequency", log="y") # power-law tail

dev.new()
Y <- cumsum(t)
plot(Y, log="y")
SAE <- function(p, plot=FALSE) {
	y <- (p[1] + p[2]*p[6]^(-p[3]*seq_along(t - p[5])))^(-1/p[4])
	if (plot)
		lines(y, col="red")
	sum(abs(log(y) - log(Y)))
}
o <- optim(c(1, 10, 0.01, 1, 0, exp(1)), SAE) # fit sigmoid to CDF
SAE(o$par, TRUE)
[1] 38.64104

dev.new()
layout(matrix(1:2))
freqs <- colMeans(AAs/rowSums(AAs))
set.seed(123L)
rand <- AAStringSet(paste(sample(names(freqs), 1e7, replace=TRUE, prob=freqs), collapse=""))
x <- DetectRepeats(rand, useEmpirical=FALSE, minScore=0)
trand <- mapply(function(x, y) {
		mean(y - x + 1)
	},
	x[, "Left"],
	x[, "Right"])
breaks <- c(0, 7:30, seq(32, 50, 2), seq(55, 80, 5), seq(100, 200, 40), 500)
fg <- tabulate(.bincode(widths[W], breaks))
bg <- tabulate(.bincode(trand, breaks))
fg <- fg/sum(fg)
bg <- bg/sum(bg)
logodds <- log(fg/bg)

SAE <- function(p, plot=FALSE) {
	est <- p[1] + (p[2] - p[1])/(p[3] + p[4]*exp(p[5]*X))^(1/p[6])
	est[is.infinite(est)] <- p[1]
	if (plot)
		lines(X, est, col="gray")
	sum(abs(est - c(logodds[1], logodds)))
}

X <- breaks
o <- optim(c(0.5, -4, 1, 0.01, 1, 10), SAE) # fit sigmoid to CDF
plot(breaks[-1], logodds, xlab="Periodicity", ylab="Log-odds", xlim=c(0, 100))
SAE(o$par, TRUE) # [1] 13.82477
cat(o$par, sep=", ") # 1.343395, -6.601122, 19.57112, 0.02275351, 0.7205948, 7.990597> 

X <- breaks*3 # convert to nucleotides
o <- optim(c(0.5, -4, 1, 0.01, 1, 10), SAE) # fit sigmoid to CDF
plot(3*breaks[-1], logodds, xlab="Periodicity", ylab="Log-odds", xlim=c(0, 100))
SAE(o$par, TRUE) # [1] 15.45879
cat(o$par, sep=", ") # 1.278936, -5.110472, 1.075462, 0.003580758, 0.3148258, 11.4301

# from DetectRepeats.R: line 140
periods <- c(1.322321, -4.741095, 3.214813, 0.001854087, 0.8317622, 9.967087) # sigmoid fit for log-odds of periodicity relative to background
X <- breaks
o <- optim(c(0.5, -4, 1, 0.01, 1, 10), SAE) # fit sigmoid to CDF
pdf(file = "model/periodicity.pdf", width = 4, height = 4.5)
plot(breaks[-1], logodds, xlab="Periodicity", ylab="Log-odds", xlim=c(0, 100))
abline(h=0, lty=2)
SAE(periods, TRUE) # [1] 14.29889
dev.off() 
cat(periods, sep=", ") # 1.322321, -4.741095, 3.214813, 0.001854087, 0.8317622, 9.967087> 
# saved as periodicity.pdf


### Copy Number of Repeat: Fig1C. Number of repeats
dev.new()
l1 <- tabulate(l[W])
l1 <- l1/sum(l1)
l2 <- tabulate(lengths(x[, "Left"]), length(l1))
l2 <- l2/sum(l2)
subset <- 1:9 # NOTE: repeats start at 2 copies
l1 <- c(l1[subset], sum(l1[-subset]))
l2 <- c(l2[subset], sum(l2[-subset]))
lens <- log(l1/l2)
plot(lens, xlab="Number of repeats", ylab="Log-odds", pch=NA)
text(seq_along(lens), lens)
#abline(lm(lens~seq_along(lens)), lty=2)
abline(h=0, lty=2)
cat(round(lens, 1), sep=", ") # NaN, -0.1, -2.1, 0.4, 0.1, 1.2, 2.1, 4.9, 2.7, 4.8> 

# use exact numbers listed in DetectRepeats.R, line # 150
lens <- c(NA_real_, -0.1, -2.2, 0.5, 0.3, 1.2, 1.9, 4.5, 2.4, 4.8) # log-odds of repeat copy number relative to background
pdf(file = "model/copyNumber.pdf", width = 4, height = 4.5)
plot(lens, xlab="Number of repeats", ylab="Empirical log-odds", pch=NA)
text(seq_along(lens), lens)
abline(h=0, lty=2)
dev.off() 


### Invertigate Column Weights
ls <- ls[W]

seqs <- readAAStringSet("model/cullpdb_pc50.0_res0.0-2.0_noBrks_len40-10000_R0.25_Xray_d2025_02_20_chains16323.fasta.gz")
m <- match(sapply(strsplit(ls, ".", fixed=TRUE), `[`, 1L),
	sapply(strsplit(names(seqs), " ", fixed=TRUE), `[`, 1L))
seqs <- seqs[m]

L <- 101L # number of points in interpolation
res1 <- numeric(L)
pBar <- txtProgressBar(style=3)
for (i in seq_along(ls)) {
	setTxtProgressBar(pBar, i/length(ls))
	aa <- readBStringSet(paste0(path, ls[i]))
	AA <- AAStringSet(toupper(aa))
	AA <- RemoveGaps(AA)
	
	# add intervening region between units back to sequences if possible
	B <- gsub(paste0("^.*(", paste0("(", AA, "", collapse=".*?)"), ")).*$"),
		"\\1",
		seqs[i])
	BB <- character(length(AA))
	for (j in seq_along(AA)) {
		BB[j] <- gsub(paste0("^(.*", AA[j], ").*$"), "\\1", B)
		B <- gsub(paste0("^(.*", AA[j], ")(.*)$"), "\\2", B)
	}
	BB <- AAStringSet(BB)
	if (length(BB) == length(AA) && all(width(BB) >= width(AA)))
		AA <- BB # replace sequences with full region
	
	AA <- AlignSeqs(AA, verbose=FALSE, anchor=NA, iterations=0, refinements=0) # realign
	pwm <- .Call("consensusProfileAA",
		AA,
		rep(1, length(AA)),
		NULL,
		PACKAGE="DECIPHER")
	a <- pwm[27,] # column occupancy
	res1 <- res1 + a[round(seq(1, length(a), length.out=L))]
}
close(pBar)

r1 <- res1/length(ls) # convert to average

# weight function
w <- 1 + -0.3*abs(seq(-1, 1, length.out=length(res1)))^3 # optimized function
w <- w/mean(w)

off <- 0.12
pdf(file = "model/columnWeights.pdf", width = 4, height = 3.5)
par(mar=c(4, 4, 2, 4))
plot(seq(0, 100, length.out=L),
	r1,
	ylim=range(r1) + c(-0.2, 0.15),
	type="l",
	xlab="",
	ylab="",
	yaxt="n")
axis(2, at=axTicks(2), labels=100*axTicks(2))
mtext(side=1, "Relative alignment position (%)", line=2)
mtext(side=2, "Average column occupancy (%)", line=2)
axis(4, at=axTicks(2) + (round(off, 1) - off), labels=axTicks(2) + round(off, 1), col="gray", col.axis="gray")
mtext(side=4, "Relative column weight", line=2, col="gray")
lines(w - off, col="gray", lty=2)
legend(x=-15,
	y=1.3,
	ncol=2,
	xpd=TRUE,
	bty="n",
	legend=c("Observed", "Optimized"),
	lty=1:2,
	text.col=c("black", "darkgray"),
	col=c("black", "darkgray"))
dev.off() 



##################### Graphical Abstract #####################
# some example of structural TR containing proteins in the training data set
# 4DF0A     4DF0.A 0.59
grep '>' benchmark_structural/Update_CE-Symmv2.3.0_benchmark/repeat_alignments_v2/4DF0A.fas
>4DF0.A_5-28
>4DF0.A_29-53
>4DF0.A_54-79
>4DF0.A_81-97
>4DF0.A_98-125
>4DF0.A_126-145
>4DF0.A_150-171
>4DF0.A_172-194

# open pdb in pymol and color
load 4DF0.cif
hide everything
show cartoon, chain A
color gray, chain A
color 0xFFB81C, resi 5-28+54-79+98-125+150-171
color 0x003594, resi 29-53+81-97+126-145+172-194
bg_color 0xe6e7e8


# 7O7AA 7O7A.A 0.59
grep '>' benchmark_structural/Update_CE-Symmv2.3.0_benchmark/repeat_alignments_v2/7O7AA.fas
>7O7A.A_46-67
>7O7A.A_68-96
>7O7A.A_97-117
>7O7A.A_118-144
>7O7A.A_145-173
>7O7A.A_174-201
>7O7A.A_202-236
>7O7A.A_237-260
>7O7A.A_261-282
>7O7A.A_286-307
>7O7A.A_308-346
>7O7A.A_347-377
>7O7A.A_378-400

# open pdb in pymol and color
load /Users/shc167/Downloads/7O7A.cif
hide everything
show cartoon, chain A
color gray, chain A
color 0xFFB81C, resi 46-67+97-117+145-173+202-236+261-282+308-346+378-400
color 0x003594, resi 68-96+118-144+174-201+237-260+286-307+347-377
bg_color 0xe6e7e8

# 3S9JA 3S9J.A 0.57
grep '>' benchmark_structural/Update_CE-Symmv2.3.0_benchmark/repeat_alignments_v2/3S9JA.fas
>3S9J.A_36-84
>3S9J.A_87-133
>3S9J.A_134-197
>3S9J.A_199-252
>3S9J.A_253-336
>3S9J.A_338-386

# open pdb in pymol and color
load /Users/shc167/Downloads/3S9J.cif
hide everything
show cartoon, chain A
color gray, chain A
color 0xFFB81C, resi 36-84+134-197+253-336
color 0x003594, resi 87-133+199-252+338-386
bg_color 0xe6e7e8

# 7CDYA 7CDY.A 0.57
grep '>' /Users/shc167/Documents/project/TR02/TR02.102/Update_CE-Symmv2.3.0_benchmark/repeat_alignments_v2/7CDYA.fas
>7CDY.A_3-39
>7CDY.A_44-98
>7CDY.A_107-164
>7CDY.A_182-222
>7CDY.A_254-299
>7CDY.A_307-345

load /Users/shc167/Downloads/7CDY.cif
hide everything
show cartoon, chain A
color gray, chain A
color 0xFFB81C, resi 3-39+107-164+254-299
color 0x003594, resi 44-98+182-222+307-345
bg_color 0xe6e7e8