Analysis_model_of_DetectRepeats.txt

Shu-Ting Cho <shutingcho@pitt.edu>

# Properties of structural tandem repeats

# Task: Generate plots for Fig1BCDEF
# 0. download PDB files using cull
# 1. Run CE-Symm on PDB files
# 2. Generate plots


# Download PDBs as described in the manuscript


# Run CE-Symm (using 5CWN as an example, same process applied to all downloaded .pdb)
cd cesymm-2.2.0-SNAPSHOT
./runCESymm.sh 5cwn.pdb


library(DECIPHER)

#######################################################
# show distribution for how often finding the closest unit to be the most similar unit, Fig1B
answer_single_model <- read.table('answer.tsv', header=1)
single_model_PDB_seqIDs <- unique(answer_single_model$ID1) # 496

input_filenames <- paste(single_model_PDB_seqIDs, '.fas', sep='')

v_n_unit_away <- c()

for (i_pdbID in seq_along(input_filenames)) {
    pdbID <- input_filenames[i_pdbID]
    cat(i_pdbID, pdbID, '\n', sep='\t')
    msa <- readAAStringSet(paste('alignments/',pdbID, sep=''))
    dist <- DistanceMatrix(msa, includeTerminalGaps = TRUE, penalizeGapLetterMatches = NA, verbose=FALSE)
	for (i_unit in seq(nrow(dist))) {
		dist_h <- dist[i_unit,]
		dist_h[i_unit] <- NA # mask unit_h
		min_dist_h <- sort(unique(dist_h[-i_unit]))[1]
		i_most_sim <- which(abs(dist_h - min_dist_h) < 0.00001)
		n_unit_away <- min(abs(i_most_sim - i_unit))
		v_n_unit_away <- c(v_n_unit_away, n_unit_away)
		cat(i_unit, n_unit_away, '\n', sep='\t')
	}
}

table(v_n_unit_away)
   1    2    3    4    5    6    7    8    9   10   11   12   14   17   18 
1098  445  209  124   56   38   20   14    6    4    3    5    2    1    1 

bar_value <- table(v_n_unit_away)
bar_value[10] <- sum(bar_value[10:length(bar_value)])
bar_value <- bar_value[1:10]
bar_value <- bar_value/sum(bar_value)

barplot(height = bar_value, ylim=c(0,0.6))



#######################################################
path <- "cesymm-2.2.0-SNAPSHOT/alignments/"

ls <- list.files(path) #3976

sM <- matrix(c(0.951, -0.266, -0.305, -0.327, 0.099, -0.126, -0.151, 0.041, -0.383, -0.26, -0.274, -0.236, -0.131, -0.451, -0.14, 0.191, 0.008, -0.586, -0.501, 0.015, -2.542, -0.266, 1.465, 0.013, -0.153, -0.741, 0.37, 0.117, -0.453, 0.178, -0.81, -0.701, 0.679, -0.46, -0.874, -0.311, -0.097, -0.129, -0.5, -0.415, -0.679, -2.542, -0.305, 0.013, 1.494, 0.532, -0.582, 0.189, 0.129, 0.037, 0.255, -0.962, -0.947, 0.202, -0.606, -0.879, -0.252, 0.261, 0.075, -0.873, -0.433, -0.834, -2.542, -0.327, -0.153, 0.532, 1.575, -1.007, 0.155, 0.597, -0.131, -0.045, -1.265, -1.194, 0.052, -0.915, -1.235, -0.131, 0.099, -0.121, -1.102, -0.8, -1.051, -2.542, 0.099, -0.741, -0.582, -1.007, 3.127, -0.777, -0.995, -0.499, -0.438, -0.174, -0.218, -0.884, -0.137, -0.189, -0.832, -0.091, -0.185, -0.446, -0.268, 0.016, -2.542, -0.126, 0.37, 0.189, 0.155, -0.777, 1.289, 0.494, -0.368, 0.251, -0.762, -0.636, 0.433, -0.259, -0.846, -0.241, 0.046, -0.01, -0.707, -0.444, -0.624, -2.542, -0.151, 0.117, 0.129, 0.597, -0.995, 0.494, 1.287, -0.38, -0.057, -0.967, -0.931, 0.342, -0.646, -1.116, -0.162, 0.007, -0.072, -0.97, -0.681, -0.758, -2.542, 0.041, -0.453, 0.037, -0.131, -0.499, -0.368, -0.38, 1.768, -0.42, -1.087, -1.022, -0.369, -0.758, -0.924, -0.333, 0.043, -0.342, -0.886, -0.863, -0.861, -2.542, -0.383, 0.178, 0.255, -0.045, -0.438, 0.251, -0.057, -0.42, 2.254, -0.781, -0.663, 0.033, -0.433, -0.29, -0.354, -0.099, -0.206, -0.217, 0.381, -0.664, -2.542, -0.26, -0.81, -0.962, -1.265, -0.174, -0.762, -0.967, -1.087, -0.781, 1.184, 0.585, -0.819, 0.423, 0.216, -0.799, -0.716, -0.29, -0.347, -0.258, 0.785, -2.542, -0.274, -0.701, -0.947, -1.194, -0.218, -0.636, -0.931, -1.022, -0.663, 0.585, 1.087, -0.799, 0.585, 0.39, -0.777, -0.73, -0.43, -0.123, -0.159, 0.343, -2.542, -0.236, 0.679, 0.202, 0.052, -0.884, 0.433, 0.342, -0.369, 0.033, -0.819, -0.799, 1.282, -0.5, -1.005, -0.175, 0.006, -0.035, -0.829, -0.564, -0.704, -2.542, -0.131, -0.46, -0.606, -0.915, -0.137, -0.259, -0.646, -0.758, -0.433, 0.423, 0.585, -0.5, 1.637, 0.285, -0.712, -0.406, -0.171, -0.135, -0.091, 0.219, -2.542, -0.451, -0.874, -0.879, -1.235, -0.189, -0.846, -1.116, -0.924, -0.29, 0.216, 0.39, -1.005, 0.285, 1.717, -0.837, -0.7, -0.528, 0.608, 0.885, 0.045, -2.542, -0.14, -0.311, -0.252, -0.131, -0.832, -0.241, -0.162, -0.333, -0.354, -0.799, -0.777, -0.175, -0.712, -0.837, 2.121, -0.015, -0.198, -0.777, -0.763, -0.588, -2.542, 0.191, -0.097, 0.261, 0.099, -0.091, 0.046, 0.007, 0.043, -0.099, -0.716, -0.73, 0.006, -0.406, -0.7, -0.015, 0.979, 0.427, -0.727, -0.505, -0.505, -2.542, 0.008, -0.129, 0.075, -0.121, -0.185, -0.01, -0.072, -0.342, -0.206, -0.29, -0.43, -0.035, -0.171, -0.528, -0.198, 0.427, 1.128, -0.659, -0.439, -0.062, -2.542, -0.586, -0.5, -0.873, -1.102, -0.446, -0.707, -0.97, -0.886, -0.217, -0.347, -0.123, -0.829, -0.135, 0.608, -0.777, -0.727, -0.659, 3.153, 0.763, -0.428, -2.542, -0.501, -0.415, -0.433, -0.8, -0.268, -0.444, -0.681, -0.863, 0.381, -0.258, -0.159, -0.564, -0.091, 0.885, -0.763, -0.505, -0.439, 0.763, 2.023, -0.287, -2.542, 0.015, -0.679, -0.834, -1.051, 0.016, -0.624, -0.758, -0.861, -0.664, 0.785, 0.343, -0.704, 0.219, 0.045, -0.588, -0.505, -0.062, -0.428, -0.287, 1.084, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, -2.542, 3.235),
	nrow=21,
	ncol=21,
	dimnames=list(c(AA_STANDARD, "*"), c(AA_STANDARD, "*")))

scores <- scores2 <- d <- d2 <- widths <- numeric(length(ls))
l <- integer(length(ls))
AAs <- matrix(0, length(ls), 20)
colnames(AAs) <- AA_STANDARD
pBar <- txtProgressBar(style=3)
for (i in seq_along(scores)) {
	setTxtProgressBar(pBar, i/length(scores))
	aa <- readAAStringSet(paste0(path, ls[i]))
	l[i] <- length(aa)
	aa <- AAStringSet(toupper(aa))
	AAs[i,] <- alphabetFrequency(unlist(aa))[1:20]
	d[i] <- mean(DistanceMatrix(aa, verbose=FALSE, type="dist"))
	scores[i] <- ScoreAlignment(aa,
		method="adjacent",
		gapOpening=-0.1,
		gapExtension=-2.6,
		substitutionMatrix=sM,
		includeTerminalGaps=TRUE)
	# realign
	aa <- RemoveGaps(aa)
	widths[i] <- mean(width(aa))
	AA <- AlignSeqs(aa, verbose=FALSE)
	d2[i] <- mean(DistanceMatrix(AA, verbose=FALSE, type="dist"))
	scores2[i] <- ScoreAlignment(AA,
		method="adjacent",
		gapOpening=-0.1,
		gapExtension=-2.6,
		substitutionMatrix=sM,
		includeTerminalGaps=TRUE)
}
close(pBar)


r <- readLines("cesymm-2.2.0-SNAPSHOT/CESYMM_seqID_UsedInBenchmarking_v1.txt")
W <- !(substring(ls, 1, nchar(ls) - 4L) %in% r) # set not used in benchmarking


# subset to those sets with non-zero TM-scores
load('cesymm-2.2.0-SNAPSHOT/ResultPDBs_v1.RData')
res <- unlist(res)
res <- strsplit(res, "\t")
w <- which(lengths(res) == 16) # missing repeats
res[w] <- lapply(res[w], c, NA_character_)
res <- do.call(cbind, res)
res <- t(res)
res <- as.data.frame(res)
res <- res[res[, "V11"] >= 0.4 & res[, "V11"] < 0.7,]
W <- W[substring(ls, 1, nchar(ls) - 4L)[W] %in% rownames(res)]



### Single Amino Acids: Fig1E. Amino acid composition
z <- readAAStringSet("cesymm-2.2.0-SNAPSHOT/cullpdb_pc50.0_res0.0-2.0_noBrks_len40-10000_R0.25_Xray_d2021_10_29_chains14689.fasta.txt")
m <- match(substring(ls, 1, nchar(ls) - 4L), gsub("^(.+?) .+$", "\\1", names(z)))
a1 <- alphabetFrequency(z[m])[, 1:20]
a1 <- colSums(a1[W,]) # background
a2 <- colSums(AAs[W,]) # foreground
a1 <- a1 - a2 # approximately subtract repeat region
a1 <- a1/sum(a1)
a2 <- a2/sum(a2)
S <- log(a2/a1)
# save RData
save(z,m,a1,a2,W,S,AAs,file='AAcomposition.RData')

# bar plot
S2 <- S[order(S, decreasing=TRUE)]
barplot(S2, xlab="Amino acid", ylab="Log-odds in repeat")
bp <- barplot(S2, xlab="Amino acid", ylab="Log-odds in repeat", ylim=c(-1,0.4))
text(bp, S2, labels = names(S2))
mean(colSums(S2*t(AAs)))
[1] -0.238701
cat(paste(names(S2), round(S2, 2), sep="="), sep=", ")
# C=0.33, W=0.29, I=0.28, V=0.24, F=0.22, Y=0.19, L=0.12, D=0.07, N=0.06, A=0.04, T=0.03, G=0.01, R=-0.02, Q=-0.05, E=-0.08, K=-0.09, P=-0.18, S=-0.2, M=-0.38, H=-0.85



# use exact numbers listed in DetectRepeats.R, line # 140
residues <- c(A=0.04, R=-0.02, N=0.06, D=0.07, C=0.33, Q=-0.05, E=-0.08, G=0.01, H=-0.85, I=0.28, L=0.12, K=-0.09, M=-0.38, F=0.22, P=-0.18, S=-0.2, T=0.03, W=0.29, Y=0.19, V=0.24)
# bar plot
S2 <- residues[order(residues, decreasing=TRUE)]
barplot(S2, xlab="Amino acid", ylab="Log-odds in repeat")
bp <- barplot(S2, xlab="Amino acid", ylab="Log-odds in repeat", ylim=c(-0.9,0.4))
text(bp, S2, labels = names(S2))
mean(colSums(S2*t(AAs)))
[1] -0.2045724
cat(paste(names(S2), round(S2, 2), sep="="), sep=", ")
C=0.33, W=0.29, I=0.28, V=0.24, F=0.22, Y=0.19, L=0.12, D=0.07, N=0.06, A=0.04, T=0.03, G=0.01, R=-0.02, Q=-0.05, E=-0.08, K=-0.09, P=-0.18, S=-0.2, M=-0.38, H=-0.85



### Periodicities: Fig1D. Repeat unit lengths

dev.new()
t <- tabulate(widths)/length(widths)
plot(t, xlab="Periodicity", ylab="Relative frequency", log="y") # power-law tail

dev.new()
Y <- cumsum(t)
plot(Y, log="y")
SAE <- function(p, plot=FALSE) {
	y <- (p[1] + p[2]*p[6]^(-p[3]*seq_along(t - p[5])))^(-1/p[4])
	if (plot)
		lines(y, col="red")
	sum(abs(log(y) - log(Y)))
}
o <- optim(c(1, 10, 0.01, 1, 0, exp(1)), SAE) # fit sigmoid to CDF
SAE(o$par, TRUE)
[1] 35.11219

dev.new()
layout(matrix(1:2))
freqs <- colMeans(AAs/rowSums(AAs))
rand <- AAStringSet(paste(sample(names(freqs), 1e6, replace=TRUE, prob=freqs), collapse=""))
x <- DetectRepeats(rand, useEmpirical=FALSE, minScore=0)
trand <- mapply(function(x, y) {
		mean(y - x + 1)
	},
	x[, "Left"],
	x[, "Right"])
breaks <- c(0, 2:30, seq(32, 50, 2), seq(55, 80, 5), seq(100, 200, 40), 500)
fg <- tabulate(.bincode(widths[W], breaks))
bg <- tabulate(.bincode(trand, breaks))
fg <- fg/sum(fg)
bg <- bg/sum(bg)
logodds <- log(fg/bg)

SAE <- function(p, plot=FALSE) {
	est <- p[1] + (p[2] - p[1])/(p[3] + p[4]*exp(p[5]*X))^(1/p[6])
	est[is.infinite(est)] <- p[1]
	if (plot)
		lines(X, est, col="red")
	sum(abs(est - c(logodds[1], logodds)))
}

# save RData
save(AAs,freqs,rand,x,trand,breaks,fg,bg,logodds,SAE,file='RepeatUnitLen.RData')

# dot plot
X <- breaks
o <- optim(c(0.5, -4, 1, 0.01, 1, 10), SAE) # fit sigmoid to CDF
plot(breaks[-1], logodds, xlab="Periodicity", ylab="Log-odds", xlim=c(0, 100))
SAE(o$par, TRUE)
[1] 14.36004
cat(o$par, sep=", ")
1.31846, -4.32551, 1.051828, 0.1434915, 0.7459665, 11.06772

X <- breaks*3 # convert to nucleotides
o <- optim(c(0.5, -4, 1, 0.01, 1, 10), SAE) # fit sigmoid to CDF
plot(3*breaks[-1], logodds, xlab="Periodicity", ylab="Log-odds", xlim=c(0, 100))
SAE(o$par, TRUE)
[1] 14.42984
cat(o$par, sep=", ")
1.321104, -4.99179, 1.684385, 0.5436799, 0.2237113, 9.984827

# use exact numbers listed in DetectRepeats.R, line # 141 & 204
periods <- c(1.124771, -4.629093, 1.898747, 0.142147, 0.8568637, 11.51574)
# addScore <- addScore + periods[1] + (periods[2] - periods[1])/(periods[3] + periods[4]*exp(periods[5]*mean(POSR - POSL + 1L, na.rm=TRUE)))^(1/periods[6])
X <- breaks
o <- optim(c(0.5, -4, 1, 0.01, 1, 10), SAE) # fit sigmoid to CDF
plot(breaks[-1], logodds, xlab="Periodicity", ylab="Log-odds", xlim=c(0, 100))
SAE(periods, TRUE)
[1] 14.89777
cat(periods, sep=", ")




### Copy Number of Repeat: Fig1C. Number of repeats
dev.new()
l1 <- tabulate(l[W])
l1 <- l1/sum(l1)
l2 <- tabulate(lengths(x[, "Left"]), length(l1))
l2 <- l2/sum(l2)
subset <- 1:10 # NOTE: repeats start at 2 copies
l1 <- c(l1[subset], sum(l1[-subset]))
l2 <- c(l2[subset], sum(l2[-subset]))
lens <- log(l1/l2)
# save RData
save(l,W,l1,l2,subset,lens,file='NumOfRepeats.RData')

# dot plot
plot(lens, xlab="Number of repeats", ylab="Log-odds", pch=NA)
text(seq_along(lens), lens)
abline(lm(lens~seq_along(lens)), lty=2)
cat(round(lens, 1), sep=", ")
NaN, -0.3, -1.3, 0.9, 0.6, 1.8, 2.6, 4.9, 3, 3.9, 5.4

# use exact numbers listed in DetectRepeats.R, line # 150
lens <- c(NA_real_, -0.3, -1.2, 1, 0.7, 1.9, 2.8, 4.5, 2.8, 4)
plot(lens, xlab="Number of repeats", ylab="Log-odds", pch=NA)
text(seq_along(lens), lens)
